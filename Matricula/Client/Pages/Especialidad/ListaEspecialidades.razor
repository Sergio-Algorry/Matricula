@page "/Especialidades"
@inject IHttpService http

<h3>Lista de Especialidades</h3>

<a class="btn btn-primary" href="Especialidades/Crear">Nueva especialidad</a>

<table>
    <tr>
        <th>Código</th>
        <th>Especialidad</th>
    </tr>

    @if (especialidades == null)
    {
        <tr>Cargando.......</tr>
    }
    else if(especialidades.Count == 0)
    {
        <tr>No existen datos</tr>
    }
    else
    {
        @foreach (var item in especialidades)
        {
            <tr>
                <td>@item.Codigo</td>
                <td>@item.NomEspecialidad</td>
                <td>
                    <a class="btn btn-primary"
                       href="Especialidades/Editar/@item.Id">
                        Editar
                    </a>
                </td>
                <td>
                    <button class="btn btn-warning"
                            @onclick="()=>Eliminar(item)">
                        Borrar
                    </button>
                </td>
            </tr>
        }
    }
</table>

<Confirmacion @ref="confirmacion"
              verCancelar="true"
              verOk="true"
              textOk="Ok"
              Titulo="Borrar especialidad"
              onCancel="Cancelar"
              onConfirm="Borrar">
              <div>
                  Está por borrar la especialidad @EspecialidadBorrar.NomEspecialidad
                  <br />
                  ¿Está seguro que desea continuar?
              </div>
</Confirmacion>


@code {
    List<Matricula.BD.Data.Entidades.Especialidad> especialidades;
    Confirmacion confirmacion;
    Especialidad EspecialidadBorrar;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        var respuesta = await http.Get<List<Matricula.BD.Data.Entidades.Especialidad>>("api/Especialidades");
        if(!respuesta.Error)
        {
            especialidades = respuesta.Respuesta;
        }
    }

    private void Eliminar(Especialidad especialidadBorrar)
    {
        EspecialidadBorrar = especialidadBorrar;
        confirmacion.Ver();
    }

    private void Cancelar()
    {
        confirmacion.Ocultar();
        EspecialidadBorrar = null;
    }

    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/Especialidades/{EspecialidadBorrar.Id}");
        if(respuesta.Error)
        {
            var body = "Error";
        }
        Cancelar();
        await Leer();
    }
}
